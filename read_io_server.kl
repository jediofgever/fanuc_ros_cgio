-- karel program to LISTEN ON tcp IP PORT 59002 FOR reading IO VALUES ON r30 FANUC CONTROLLERS
-- establish a TCP connection on your robot ip with defined port(59002), after a successful connection,
-- a huge chunk of string will be recived which needs to be 
-- parsed on client side , an example output;
----------------------------------------------------------------------------------------------------------------------------
--DI0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--00000000000000000000000000000000DO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--0000000000000000000000000000000000000000RI:00000RO000000AI000000AO020000
----------------------------------------------------------------------------------------------------------------------------
--Notice the Letters which describes TYPES of IO(DI FOR DIN, RI for RDI .... )
-- DI/DO AND RDI/RDO IS boolean while AIN/AOUT IS INTEGER


PROGRAM IO_SERVER_RD
%STACKSIZE = 4000
%NOLOCKGROUP
%NOPAUSE=ERROR+COMMAND+TPENABLE
%ENVIRONMENT uif
%ENVIRONMENT sysdef
%ENVIRONMENT memo
%ENVIRONMENT kclop
%ENVIRONMENT bynam
%ENVIRONMENT fdev
%ENVIRONMENT flbt
%INCLUDE klevccdf
%INCLUDE klevkeys
%INCLUDE klevkmsk


-------------------------------------------------------------------------------
VAR
      file_read    : FILE
      dout_str     : STRING[128]
      din_str      : STRING[128]
      aout_str     : STRING[8]
      ain_str      : STRING[8]
      rout_str     : STRING[8]
      rin_str      : STRING[8]
      apr_ttl_str  : STRING[32]
      tem_str      : STRING[3]
      tem_int      : INTEGER
      batch_number : INTEGER
      batch_size   : INTEGER
      crr_io_idx   : INTEGER    
      this_batch   : INTEGER
      STATUS       : INTEGER
      entry        : INTEGER
      io_val       : BOOLEAN
      aio_val      : INTEGER
      shutdwn_req_ : BOOLEAN        -- program abort requested status


-------------------------------------------------------------------------------
-- strip whitespace from left side of string
ROUTINE lstrip(s : STRING) : STRING
  VAR
    i : INTEGER
  BEGIN
    FOR i = 1 TO STR_LEN(s) DO
      IF SUB_STR(s,i,1) <> ' ' THEN
        RETURN(SUB_STR(s,i,STR_LEN(s)))
      ENDIF
    ENDFOR

    RETURN(s)
  END lstrip

-- BOOLEAN to string converter function
ROUTINE b_to_s(b : BOOLEAN) : STRING
  BEGIN
    IF b THEN
      RETURN('1')
    ELSE
      RETURN('0')
    ENDIF
END b_to_s

-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------



--INTEGER to STRING converter function
ROUTINE i_to_s(i : INTEGER) : STRING
  VAR
    s : STRING[16]
  BEGIN
    IF UNINIT(i) THEN
      RETURN('null')
    ENDIF

    CNV_INT_STR(i, 0, 0, s)
    RETURN(lstrip(s)) 
  END i_to_s





-- Begin program
BEGIN
shutdwn_req_ = FALSE

SET_VAR(entry, '*SYSTEM*','$HOSTS_CFG[5].$SERVER_PORT',59002,STATUS)

IF STATUS <> 0 THEN
  WRITE('IO_READ: SET_VAR FAILED',CR)
  RETURN
ENDIF


MSG_DISCO('S5:',STATUS)


WHILE (NOT shutdwn_req_) DO


    --we will use 128 IO values max, you can adjust this to your own number of IOs   
  

    MSG_CONNECT('S5:',STATUS)

    WRITE(' CONNECT STATUS = ',STATUS,CR)
    IF STATUS <> 0  THEN
      WRITE('IO READ: SOCKET ACCEPT ERROR')
      --shutdwn_req_ = TRUE
      GOTO lbl_break0
    ENDIF

    WRITE('IO read: CONNECTED')

    --CLIENT CONNECTED
    SET_FILE_ATR(file_read, ATR_IA)
    OPEN FILE file_read ('rw','S5:')

    
    WHILE ( NOT shutdwn_req_) DO
                CLR_IO_STAT(file_read)
                STATUS = IO_STATUS(file_read)  
                READ file_read(tem_str::3)


                --REinitilize strings, these strings can be used to parse output in cliuent side
                din_str = 'DI'
                dout_str= 'DO'
                rin_str = 'RI'
                rout_str= 'RO'
                ain_str = 'AI'
                aout_str= 'AO'
                tem_str = 'vd' 
                tem_int = 10

                FOR batch_number = 1 TO 126 DO

                                --Number of AOUT/AIN AND RDO/RDI IS MUCH SMALLER THAN DI/DO, SO WE CAN READ UPTO 128 , 
                                --BECAUSE THEY DONT EXIST ON THE CONTROLLER  

                                IF  batch_number < 9 THEN 
                                      
                                      --READ RDI/RDO AND STORE OUTPUT IN STRINGS RESERVERD FOR 
                                      io_val = RDI[batch_number]
                                      rin_str = rin_str + b_to_s(io_val)     
                                      io_val = RDO[batch_number]
                                      rout_str = rout_str + b_to_s(io_val)    
                                      ----------------------------------------------------------
                                      --READ AIN/AOUT AND STORE OUTPUT IN STRINGS RESERVERD FOR 
                                      aio_val = AIN[batch_number]
                                      ain_str = ain_str + i_to_s(aio_val)     
                                      aio_val = AOUT[batch_number]
                                      aout_str = aout_str + i_to_s(aio_val) 
                                      -----------------------------------------------------------           
                                ENDIF

                                --READ AIN/AOUT AND STORE OUTPUT IN STRINGS RESERVERD FOR 
                                io_val = DIN[batch_number]
                                din_str = din_str + b_to_s(io_val)     
                                io_val = DOUT[batch_number]
                                dout_str = dout_str + b_to_s(io_val)    
                                ----------------------------------------------------------------               
                ENDFOR
                -- Since the total lenght of RDI/RDO AND AIN/AOUT IS NOT THAT HUGE, JUST CONCANATE THEM INTO ONE BIGGER STRING 
                apr_ttl_str = rin_str + rout_str + ain_str + aout_str

                BYTES_AHEAD(file_read, entry, STATUS)

                IF (STATUS <> 0) THEN
                  GOTO lbl_break1
                ENDIF

                WRITE file_read(din_str)
                WRITE file_read(dout_str)
                WRITE file_read(apr_ttl_str) 

                IF (STATUS <> 0) THEN
                    GOTO lbl_break1
                ENDIF
                
    ENDWHILE

    IF ((STATUS = 0) AND (NOT shutdwn_req_)) THEN GOTO lbl_cont0; ENDIF

    lbl_break0::
        CLOSE FILE file_read
        MSG_DISCO('S5:',STATUS)
        DELAY(5000)

	  lbl_cont0::
        WRITE('IO READ : WAIT FOR NEW CLIENT \n')
        MSG_DISCO('S5:',STATUS)
		    DELAY(2000)

    lbl_break1::
        MSG_DISCO('S5:',STATUS)
        DELAY(2000)
ENDWHILE         

MSG_DISCO('S5:',STATUS)
WRITE('IO READ: DESTROYED! \n',CR) 
END IO_SERVER_RD